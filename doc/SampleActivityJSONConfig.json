// This is a JSON schema that is under development (it is expected to encapsulate the ideas
// in the sample instance below it. -mjl 9/16/2013
{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "Pearson Brix Activity Configuration",
    "description": "A complete configuration used to create all the related brix and mortar needed to perform an activity.",
    "type": "object"
	"required": ["sequenceNodeKey", "containerConfig"],
	"properties":
		{
			"sequenceNodeKey":
				{
					"description": "The sequence node key created from the sequence node id by the IPS for the PAF sequence node that this config has been extracted from. This should not exist in the config stored in PAF.",
					"type": "string"
				},
			"containerConfig":
				{
					"description": "Array of configuration objects each of which defines all the brix and mortar that live together in a single element (or iframe), for all of the targets on a page.",
					"type": "array",
					"minItems": 1,
					"items": { "$ref": "#/definitions/containerConfig" }
				}
		},
	"definitions":
		{
			"containerConfig":
				{
					"description": "defines all the brix and mortar that live together in a single element (or iframe).",
					"type": "object",
					"required": ["containerId", "brixConfig"],
					"properties":
						{
							"containerId":
								{
									"description": "Unique ID of page container, probably the ID on the div or iframe or object element that is the target of this configuration",
									"type": "string",
									"minLength": 1
								},
							"brixConfig":
								{
									"description": "Array of configuration for all of the brix in this container.",
									"type": "array",
									"items": { "$ref": "#/definitions/brixConfig" }
								},
							"mortarConfig":
								{
									"description": "Array of configuration for all of the mortar in this container.",
									"type": "array",
									"items": { "$ref": "#/definitions/mortarConfig" }
								},
						}
				},
			"brixConfig":
				{
					"description": "configuration of a particular bric.",
					"type": "object",
					"required": ["bricId", "bricType", "config"],
					"properties":
						{
							"bricId":
								{
									"description": "A string which uniquely identifies this bric out of the set of all brix in the activity",
									"type": "string",
									"minLength": 1
								},
							"bricType":
								{
									"description": "BricTypes enum name used to register the bric with the BricWorks",
                                    "type": "string",
									"enum":
										[
											"SvgContainer",
											"BarChart",
											"Button",
											"Callouts",
											"CaptionedImage",
											"Carousel",
											"CheckGroup",
											"Image",
											"ImageViewer",
											"LabelGroup",
											"Legend",
											"LineGraph",
											"MarkerGroup",
											"MultipleChoiceQuestion",
											"MultiSelectQuestion",
											"NumericInput",
											"NumericQuestion",
											"PieChart",
											"RadioGroup",
											"Readout",
											"SelectGroup",
											"Sketch",
											"Slider"
										],
								},
							"config":
								{
									"description": "config for the bric type specified",
									"type": "object",
								},
							"configFixup":
								{
									"description": "array of fixups that need to be made to the config before using it to construct the bric",
									"type": "array",
									"items": { "$ref": "#/definitions/configFixup" }
								},
							"state":
								{
									"description": "State information specific to this bric that it can use to restore itself. Will probably require a method on all brix to send this info to. Can state be restored before the bric is drawn or only after?",
									"type": "object",
								},
							"answerKey":
								{
									"description": "The answer key defining how to determine if a student's answer is correct, and the various responses that may be returned",
									"type": "object",
								},
						}
				},
			"configFixup":
				{
					"description": "runtime action to be applied to the config for the associated bric before constructing that bric",
					"type": "object",
                    "oneOf":
                        [
                            {"$ref": "#/definitions/configFixup-set-property"},
                        ]
				},
			"configFixup-set-property":
				{
					"description": "fixup a config by defining a property on that config",
					"type": "object",
					"required": ["type", "name", "value"],
					"properties":
						{
                            "type":
                                {
                                    "description": "identifies this fixup as setting a property on the config",
                                    "type": "string",
                                    "enum": ["set-property"]
                                },
                            "name":
                                {
                                    "description": "the name of the config property to be set",
                                    "type": "string"
                                },
                            "value":
                                {
                                    "description": "a dynamicValue object which describes how to construct the value of the property to be set on the config",
                                    "$ref": "#/definitions/dynamicValue",
                                },
						}
				},
            "dynamicValue":
                {
                    "description": "describes how to construct a value at runtime which may reference previously constructed objects",
                    "type": "object"
                    "oneOf":
                        [
                            {"$ref": "#/definitions/dynamicValue-d3select"},
                            {"$ref": "#/definitions/dynamicValue-property-of-ref"},
                        ]
                },
			"dynamicValue-d3select":
				{
					"description": "a runtime value that is a d3 selection w/ a particular selector",
					"type": "object",
					"required": ["type", "selector"],
					"properties":
						{
                            "type":
                                {
                                    "description": "identifies this value as a d3 selection",
                                    "type": "string",
                                    "enum": ["d3select"]
                                },
                            "selector":
                                {
                                    "description": "the selector argument to d3.select",
                                    "type": "string"
                                },
						}
				},
			"dynamicValue-property-of-ref":
				{
					"description": "a runtime value that is the value of a property (accessed via accessor method) of an object",
					"type": "object",
					"required": ["type", "domain", "refId", "accessor"],
					"properties":
						{
                            "type":
                                {
                                    "description": "identifies this value as the property of a reference object",
                                    "type": "string",
                                    "enum": ["property-of-ref"]
                                },
                            "domain":
                                {
                                    "description": "A string which identifies a scope in which the refId can be used to identify an existing object.",
                                    "type": "string"
                                },
                            "refId":
                                {
                                    "description": "the id that identifies a value in the specified domain.",
                                    "type": "string"
                                },
                            "accessor":
                                {
                                    "description": "the name of the accessor method of the object that returns the property value",
                                    "type": "string"
                                },
						}
				},
			"mortarConfig":
				{
					"description": "",
					"type": "object",
					"required": [],
					"properties":
						{
						}
				},
			"foo":
				{
					"description": "",
					"type": "object",
					"required": [],
					"properties":
						{
						}
				},
			"foo":
				{
					"description": "",
					"type": "object",
					"required": [],
					"properties":
						{
						}
				},
			"foo":
				{
					"description": "",
					"type": "object",
					"required": [],
					"properties":
						{
						}
				},
			"foo":
				{
					"description": "",
					"type": "object",
					"required": [],
					"properties":
						{
						}
				},
		}
}

{
	"activityId": <PAF activity guid>,
	"containerConfig":
		[
			{
				"containerId": <ID of page container, perhaps div or iframe or object element id that is the target of this configuration>,
				"brixConfig":
					[
						{
							"bricId": <unique id for this bric in this container>,
							"bricType": "Button"|"Linegraph"|"Callout"|"CaptionedImage"|"ImageViewer"|...etc,
							"config":
								{
									... config for bric type specified
								},
							"configFixup":
								{
									<[optional] object describing runtime modifications to the config, perhaps
										adding properties referencing a previously created bric>
								}
						},
						{
							"bricType": ...
							"config": ...
						},
						...
					],
				"mortarConfig":
					[
						{
							"mortarId": <unique id for this mortar in this container>,
							"mortarType": "BrixEventHandler"|"DataConverter"|"Action"|...etc,
							"config":
								{
									... config for mortar type specified
								}
						},
						{
							"mortarType": ...
							"config": ...
						},
						...
					]
				"hookupActions":
					[
						{
							"actionType": "method-call", /* the method-call handles a lot of the actions needed, but I expect there are other types of actions */
							"config":
								{
									"objectId": "Invoker-GUID",
									"methodName": "registerObject",
									"args":
										[
											{ "type": "static", "value": "barChart_GUID" }, /* static args use the value specified here */
											{ "type": "bric-obj-ref", "id": "barChart_GUID" } /* obj refs are replaced w/ the object created above w/ the specified id */
										]
								}
						},
						{
							"actionType": ...
							"config": ...
						},
						...
					]
			},
			{
				"containerId": ...
				"brixConfig": ...
				"mortarConfig": ...
			},
			...
		]
}
